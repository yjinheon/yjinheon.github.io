[{"categories":["Data Engineering"],"content":" 문제상황 SSH를 통해 git 저장소를 원격 저장소와 로컬에서 자동으로 동기화 하려함 cron으로 12시간 마다 저장소를 업데이트 하려 했는데 git push 할때 마다 ssh passphrase를 입력해야함 로컬에서 저장소 업데이트를 자동화 하려면 passphrase를 따로 입력받지 않고 스크립트에서 자동으로 배포할 수 있게끔 설정을 잡아줄 필요가 있음 ","date":"2024-05-15","objectID":"/posts/02.de/de-ssh-git-push/:1:0","series":null,"tags":["Git"],"title":"[Git]ssh passphrase없이 commit하기","uri":"/posts/02.de/de-ssh-git-push/#문제상황"},{"categories":["Data Engineering"],"content":" 해결1 eval \"$(ssh-agent -s)\" # ssh agent의 pid 확인 ssh-add 첫번째 방법은 세션 단위에서 passphrase를 매번 입력하지 않도록 설정하는 방식이다. 이 방식은 현재 세션에서만 유효하다. 즉, 세션을 종료하면 다시 passphrase를 입력해야 한다. ","date":"2024-05-15","objectID":"/posts/02.de/de-ssh-git-push/:2:0","series":null,"tags":["Git"],"title":"[Git]ssh passphrase없이 commit하기","uri":"/posts/02.de/de-ssh-git-push/#해결1"},{"categories":["Data Engineering"],"content":" 해결2ssh key를 사용할 때마다 passphrase를 입력하지 않도록 설정 bashrc에 아래 내용을 추가 env=~/.ssh/agent.env agent_load_env () { test -f \"$env\" \u0026\u0026 . \"$env\" \u003e| /dev/null ; } agent_start () { (umask 077; ssh-agent \u003e| \"$env\") . \"$env\" \u003e| /dev/null ; } agent_load_env # agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2=agent not running agent_run_state=$(ssh-add -l \u003e| /dev/null 2\u003e\u00261; echo $?) if [ ! \"$SSH_AUTH_SOCK\" ] || [ $agent_run_state = 2 ]; then agent_start ssh-add elif [ \"$SSH_AUTH_SOCK\" ] \u0026\u0026 [ $agent_run_state = 1 ]; then ssh-add fi unset env 로그인 시 자동으로 ssh-agent를 실행하고 ssh-add를 실행하여 passphrase를 입력하지 않도록 설정한다. 두번째 방법을 통해 crontab을 이용하여 자동으로 git 저장소를 업데이트하는 환경을 구축하였다. ","date":"2024-05-15","objectID":"/posts/02.de/de-ssh-git-push/:3:0","series":null,"tags":["Git"],"title":"[Git]ssh passphrase없이 commit하기","uri":"/posts/02.de/de-ssh-git-push/#해결2"},{"categories":["Data Engineering"],"content":" Reference https://www.asterhu.com/post/2023-12-21-use-ssh-github-push-crontab/ https://docs.github.com/en/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases?platform=windows ","date":"2024-05-15","objectID":"/posts/02.de/de-ssh-git-push/:4:0","series":null,"tags":["Git"],"title":"[Git]ssh passphrase없이 commit하기","uri":"/posts/02.de/de-ssh-git-push/#reference"},{"categories":"test","content":"첫번째 포스트 ","date":"2024-05-15","objectID":"/projets/01.ariflow_pipeline/:0:0","series":null,"tags":null,"title":"Airflow파이프라인 프로젝트","uri":"/projets/01.ariflow_pipeline/#"},{"categories":["Data Engineering"],"content":" Direction Operators리눅스에서 데이터의 입출력방향을 다루는 연산자는 Direction Operators이다. Direction Operators에는 \u003e와 \u003e\u003e가 있다. \u003e와 \u003e\u003e 의 차이점은 Linux에서의 데이터의 출력방향이다. \u003e : 기존 파일을 덮어쓰거나 지정한 이름의 파일이 디렉토리에 없는 경우 파일을 생성한다 \u003e\u003e : 기존 파일에 추가하거나 지정한 이름의 파일이 디렉토리에 없는 경우 파일을 생성한다. 정리하면 다음과 같다. 파일을 수정하고 기존 데이터를 덮어쓰려면 \u003e 사용. 파일에 무언가를 추가하려면 \u003e\u003e 연산자를 사용. ","date":"2021-06-01","objectID":"/posts/02.de/de-bash-direction_operators/:1:0","series":null,"tags":["Liuux","Bash"],"title":"[Bash]Direction Operators","uri":"/posts/02.de/de-bash-direction_operators/#direction-operators"},{"categories":["Data Engineering"],"content":" 예제 \u003e 연산자 사용 # a.txt 파일에 \"Hello World\"를 출력한다. echo \"Hello World\" \u003e a.txt \u003e\u003e 연산자 사용 a.txt 파일에 \"Goodbye World\"를 추가한다. echo \"Goodbye World\" \u003e\u003e a.txt cat a.txt Hello World Goodbye World ","date":"2021-06-01","objectID":"/posts/02.de/de-bash-direction_operators/:2:0","series":null,"tags":["Liuux","Bash"],"title":"[Bash]Direction Operators","uri":"/posts/02.de/de-bash-direction_operators/#예제"},{"categories":["Data Engineering"],"content":" References https://www.tutorialspoint.com/unix/unix-io-redirections.htm ","date":"2021-06-01","objectID":"/posts/02.de/de-bash-direction_operators/:3:0","series":null,"tags":["Liuux","Bash"],"title":"[Bash]Direction Operators","uri":"/posts/02.de/de-bash-direction_operators/#references"},{"categories":["Data Engineering"],"content":" 도커 이미지","date":"2021-06-01","objectID":"/posts/02.de/de-docker-commands/:1:0","series":null,"tags":["Docker"],"title":"[Docker]Docker 자주쓰는 명령어","uri":"/posts/02.de/de-docker-commands/#도커-이미지"},{"categories":["Data Engineering"],"content":" docker imagesdocker images ","date":"2021-06-01","objectID":"/posts/02.de/de-docker-commands/:1:1","series":null,"tags":["Docker"],"title":"[Docker]Docker 자주쓰는 명령어","uri":"/posts/02.de/de-docker-commands/#docker-images"},{"categories":["Data Engineering"],"content":" 도커 컨테이너","date":"2021-06-01","objectID":"/posts/02.de/de-docker-commands/:2:0","series":null,"tags":["Docker"],"title":"[Docker]Docker 자주쓰는 명령어","uri":"/posts/02.de/de-docker-commands/#도커-컨테이너"},{"categories":["Data Engineering"],"content":" docker run: 도커 이미지 실행 docker run -v [로컬경로]:/[컨테이너경로] -d -p 8080:8080 yjinheon/test:latest ","date":"2021-06-01","objectID":"/posts/02.de/de-docker-commands/:2:1","series":null,"tags":["Docker"],"title":"[Docker]Docker 자주쓰는 명령어","uri":"/posts/02.de/de-docker-commands/#docker-run"},{"categories":["Data Engineering"],"content":" docker psdocker ps # 모든 컨테이너를 보여준다 docker ps -a # 실행중인 docker containner id 전부 가져오기 docker ps | awk 'NR \u003e 1 {print $1}' # 맨위의 docker container 하나만 가져오기 docker ps | awk 'NR \u003e 1 {print $1; exit}' ","date":"2021-06-01","objectID":"/posts/02.de/de-docker-commands/:2:2","series":null,"tags":["Docker"],"title":"[Docker]Docker 자주쓰는 명령어","uri":"/posts/02.de/de-docker-commands/#docker-ps"},{"categories":["Data Engineering"],"content":" docker rm# 컨테이너 ID로 삭제 docker rm [컨테이너 ID] # 컨테이너 명으로 삭제 docker rm [컨네이너 명] # 실행중인 컨테이너 강제삭제 docker rm -f [컨테이너명] id가 none인 도커 이미지 전부 삭제 docker rmi $(docker images -a|grep \"\u003cnone\u003e\"|awk '$1==\"\u003cnone\u003e\" {print $3}') ","date":"2021-06-01","objectID":"/posts/02.de/de-docker-commands/:2:3","series":null,"tags":["Docker"],"title":"[Docker]Docker 자주쓰는 명령어","uri":"/posts/02.de/de-docker-commands/#docker-rm"},{"categories":["Data Engineering"],"content":" 도커 볼륨","date":"2021-06-01","objectID":"/posts/02.de/de-docker-commands/:3:0","series":null,"tags":["Docker"],"title":"[Docker]Docker 자주쓰는 명령어","uri":"/posts/02.de/de-docker-commands/#도커-볼륨"},{"categories":["Data Engineering"],"content":" docker volumedocker create volume [볼륨명] ","date":"2021-06-01","objectID":"/posts/02.de/de-docker-commands/:3:1","series":null,"tags":["Docker"],"title":"[Docker]Docker 자주쓰는 명령어","uri":"/posts/02.de/de-docker-commands/#docker-volume"},{"categories":["Data Engineering"],"content":" References https://docs.docker.com/engine/reference/commandline/ ","date":"2021-06-01","objectID":"/posts/02.de/de-docker-commands/:4:0","series":null,"tags":["Docker"],"title":"[Docker]Docker 자주쓰는 명령어","uri":"/posts/02.de/de-docker-commands/#references"},{"categories":null,"content":" 소개안녕하세요 이것저것 하고 있습니다. ","date":"0001-01-01","objectID":"/about/:1:0","series":null,"tags":null,"title":"","uri":"/about/#소개"}]